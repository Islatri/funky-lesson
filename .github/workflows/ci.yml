name: CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  TRUNK_VERSION: 0.21.14
  TAURI_CLI_VERSION: 2.8.3

jobs:
  quality:
    name: Quality & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2

      - name: Install Linux deps
        run: sudo apt-get update && sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libgtk-3-dev

      - name: Format & Check
        run: |
          cargo fmt --all -- --check
          cargo clippy --workspace --all-targets -- -D clippy::correctness -D clippy::suspicious -W clippy::complexity
          cargo check --workspace

      - name: Test
        run: cargo test --workspace

  build-desktop:
    name: Desktop Build
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' 
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      # üéØ ÂÆâË£Ö Rust Âπ∂Ê∑ªÂä† WASM targetÔºàÂÖ≥ÈîÆ‰øÆÂ§çÔºâ
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin,wasm32-unknown-unknown' || 'wasm32-unknown-unknown' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      # üöÄ ÊâÄÊúâÂπ≥Âè∞ÈÉΩ‰ΩøÁî®È¢ÑÁºñËØëÁâàÊú¨
      - name: Cache trunk binary
        id: cache-trunk
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/trunk${{ runner.os == 'Windows' && '.exe' || '' }}
          key: trunk-binary-${{ runner.os }}-${{ env.TRUNK_VERSION }}

      - name: Install trunk (precompiled)
        if: steps.cache-trunk.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ~/.cargo/bin
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Windows È¢ÑÁºñËØëÁâàÊú¨
            curl -L "https://github.com/trunk-rs/trunk/releases/download/v${{ env.TRUNK_VERSION }}/trunk-x86_64-pc-windows-msvc.zip" -o trunk.zip
            unzip trunk.zip
            mv trunk.exe ~/.cargo/bin/
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # macOS È¢ÑÁºñËØëÁâàÊú¨
            curl -L "https://github.com/trunk-rs/trunk/releases/download/v${{ env.TRUNK_VERSION }}/trunk-x86_64-apple-darwin.tar.gz" -o trunk.tar.gz
            tar -xzf trunk.tar.gz
            mv trunk ~/.cargo/bin/
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            # Linux È¢ÑÁºñËØëÁâàÊú¨
            curl -L "https://github.com/trunk-rs/trunk/releases/download/v${{ env.TRUNK_VERSION }}/trunk-x86_64-unknown-linux-gnu.tar.gz" -o trunk.tar.gz
            tar -xzf trunk.tar.gz
            mv trunk ~/.cargo/bin/
          fi
          
          # È™åËØÅÂÆâË£Ö
          ~/.cargo/bin/trunk --version

      - uses: tauri-apps/tauri-action@v0.5.23
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}

  build-android:
    name: Android Build  
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    needs: quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cache-disabled: false

      # üéØ Android ÊûÑÂª∫‰πüÈúÄË¶Å WASM targetÔºàÂÖ≥ÈîÆ‰øÆÂ§çÔºâ
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android,wasm32-unknown-unknown

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      # üîß ‰øÆÂ§ç NDK ÂÆâË£ÖÂíåÁéØÂ¢ÉÂèòÈáèËÆæÁΩÆ
      - name: Install and setup Android NDK
        run: |
          # ÂÆâË£Ö NDK
          yes | sdkmanager "ndk;26.3.11579264"
          
          # ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè
          echo "NDK_HOME=$ANDROID_HOME/ndk/26.3.11579264" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/26.3.11579264" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/26.3.11579264" >> $GITHUB_ENV
          
          # È™åËØÅÂÆâË£Ö
          ls -la $ANDROID_HOME/ndk/
          ls -la $ANDROID_HOME/ndk/26.3.11579264/

      - name: Cache build tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/trunk
            ~/.cargo/bin/cargo-tauri
          key: build-tools-${{ runner.os }}-trunk-${{ env.TRUNK_VERSION }}-tauri-${{ env.TAURI_CLI_VERSION }}

      - name: Install tools
        run: |
          # üöÄ Android ÊûÑÂª∫‰πü‰ΩøÁî®È¢ÑÁºñËØëÁâàÊú¨ÁöÑ trunk
          if [ ! -f ~/.cargo/bin/trunk ]; then
            mkdir -p ~/.cargo/bin
            curl -L "https://github.com/trunk-rs/trunk/releases/download/v${{ env.TRUNK_VERSION }}/trunk-x86_64-unknown-linux-gnu.tar.gz" -o trunk.tar.gz
            tar -xzf trunk.tar.gz
            mv trunk ~/.cargo/bin/
            ~/.cargo/bin/trunk --version
          fi
          
          if [ ! -f ~/.cargo/bin/cargo-tauri ]; then
            cargo install --version ${{ env.TAURI_CLI_VERSION }} tauri-cli --locked
          fi

      - name: Setup Android signing
        run: |
          mkdir -p ${{ github.workspace }}/android-signing
          echo "${{ secrets.ANDROID_KEYSTORE_FILE }}" | base64 --decode > ${{ github.workspace }}/android-signing/app-release.jks
          cat << EOF > ${{ github.workspace }}/src-tauri/gen/android/local.properties
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=${{ github.workspace }}/android-signing/app-release.jks
          EOF

      # üîß Ê∑ªÂä†ÁéØÂ¢ÉÂèòÈáèÈ™åËØÅÂíåÊûÑÂª∫ÂâçÊ£ÄÊü•
      - name: Verify Android environment
        run: |
          echo "=== Environment Variables ==="
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "NDK_HOME: $NDK_HOME"
          echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
          echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
          
          echo "=== NDK Directory ==="
          ls -la $ANDROID_HOME/ndk/26.3.11579264/ || echo "NDK directory not found"
          
          echo "=== Rust targets ==="
          rustup target list --installed

      - name: Build Android APK (Release & Signed)
        run: cargo tauri android build
        env:
          CARGO_INCREMENTAL: 1
          NDK_HOME: ${{ env.NDK_HOME }}
          ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-signed
          path: src-tauri/gen/android/app/build/outputs/apk/universal/release/*.apk

      - name: Upload AAB
        uses: actions/upload-artifact@v4
        with:
          name: android-aab-signed
          path: src-tauri/gen/android/app/build/outputs/bundle/universalRelease/*.aab

      - name: Cleanup signing files
        if: always()
        run: |
          rm -rf ${{ github.workspace }}/android-signing
          rm -f ${{ github.workspace }}/src-tauri/gen/android/local.properties

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v') 
    needs: [build-desktop, build-android]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            **/*
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}