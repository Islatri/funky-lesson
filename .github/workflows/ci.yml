name: CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'  # 添加标签触发条件
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # 单一任务：质量检查 + 测试
  quality:
    name: Quality & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2

      # 安装 Linux 系统依赖
      - name: Install Linux deps
        run: sudo apt-get update && sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libgtk-3-dev

      # 快速检查格式和基本编译
      - name: Format & Check
        run: |
          cargo fmt --all -- --check
          cargo clippy --workspace --all-targets -- -D clippy::correctness -D clippy::suspicious -W clippy::complexity
          cargo check --workspace

      # 只运行必要的测试
      - name: Test
        run: cargo test --workspace

  # 在发布或标签推送时构建桌面版
  build-release:
    name: Release Build
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    needs: quality
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Install Linux deps
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libgtk-3-dev

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install tools
        run: |
          cargo install trunk tauri-cli --locked

      - name: Build
        run: |
          trunk build --release
          cargo tauri build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-app
          path: |
            src-tauri/target/release/bundle/**/*

  # 在发布或标签推送时构建Android版
  build-android:
    name: Android Build
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    needs: quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - uses: android-actions/setup-android@v3

      - name: Setup Android
        run: |
          sdkmanager "ndk;25.2.9519653"
          rustup target add aarch64-linux-android armv7-linux-androideabi

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build Android
        run: |
          cargo install trunk tauri-cli --locked
          trunk build --release
          cargo tauri android build --apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: src-tauri/gen/android/app/build/outputs/apk/**/*.apk

  # 发布 - 只在标签推送时运行，不在 release 事件时运行
  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-release, build-android]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            */**/*
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}