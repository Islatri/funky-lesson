name: CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

    # 添加必要的权限
permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

env:
  CARGO_TERM_COLOR: always
  TRUNK_VERSION: 0.21.14
  TAURI_CLI_VERSION: 2.8.3

jobs:
  quality:
    name: Quality & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2

      - name: Install Linux deps
        run: sudo apt-get update && sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libgtk-3-dev

      - name: Format & Check
        run: |
          cargo fmt --all -- --check
          cargo clippy --workspace --all-targets
          cargo check --workspace

      - name: Test
        run: cargo test --workspace

  build-desktop:
    name: Desktop Build
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            artifact-name: 'macos-aarch64'
          - platform: 'macos-latest' 
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            artifact-name: 'macos-x86_64'
          - platform: 'ubuntu-22.04'
            args: ''
            target: ''
            artifact-name: 'linux'
          - platform: 'windows-latest'
            args: ''
            target: ''
            artifact-name: 'windows'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      # 🎯 安装 Rust 并添加 WASM target（关键修复）
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin,wasm32-unknown-unknown' || 'wasm32-unknown-unknown' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      # 🚀 所有平台都使用预编译版本
      - name: Cache trunk binary
        id: cache-trunk
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/trunk${{ runner.os == 'Windows' && '.exe' || '' }}
          key: trunk-binary-${{ runner.os }}-${{ env.TRUNK_VERSION }}

      - name: Install trunk (precompiled)
        if: steps.cache-trunk.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ~/.cargo/bin
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Windows 预编译版本
            curl -L "https://github.com/trunk-rs/trunk/releases/download/v${{ env.TRUNK_VERSION }}/trunk-x86_64-pc-windows-msvc.zip" -o trunk.zip
            unzip trunk.zip
            mv trunk.exe ~/.cargo/bin/
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # macOS 预编译版本
            curl -L "https://github.com/trunk-rs/trunk/releases/download/v${{ env.TRUNK_VERSION }}/trunk-x86_64-apple-darwin.tar.gz" -o trunk.tar.gz
            tar -xzf trunk.tar.gz
            mv trunk ~/.cargo/bin/
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            # Linux 预编译版本
            curl -L "https://github.com/trunk-rs/trunk/releases/download/v${{ env.TRUNK_VERSION }}/trunk-x86_64-unknown-linux-gnu.tar.gz" -o trunk.tar.gz
            tar -xzf trunk.tar.gz
            mv trunk ~/.cargo/bin/
          fi
          
          # 验证安装
          ~/.cargo/bin/trunk --version

      - uses: tauri-apps/tauri-action@v0.5.23
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}
          # 不自动发布，手动处理 artifacts
          uploadReleaseAssets: false

      # 收集和重命名桌面端产物
      - name: Collect and rename artifacts
        shell: bash
        run: |
          # 提取版本号（去掉 'v' 前缀）
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          
          mkdir -p artifacts
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Windows 产物
            find target/release/bundle -name "*.msi" -o -name "*.exe" | while read file; do
              ext="${file##*.}"
              cp "$file" "artifacts/FunkyLesson-${VERSION}-windows.${ext}"
            done
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # macOS 产物
            find target -name "*.dmg" -o -name "*.app.tar.gz" | while read file; do
              if [[ "$file" == *".dmg" ]]; then
                cp "$file" "artifacts/FunkyLesson-${VERSION}-${{ matrix.artifact-name }}.dmg"
              elif [[ "$file" == *".app.tar.gz" ]]; then
                cp "$file" "artifacts/FunkyLesson-${VERSION}-${{ matrix.artifact-name }}.app.tar.gz"
              fi
            done
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            # Linux 产物
            find target/release/bundle -name "*.deb" -o -name "*.AppImage" -o -name "*.tar.gz" | while read file; do
              ext="${file##*.}"
              if [[ "$ext" == "gz" ]]; then
                cp "$file" "artifacts/FunkyLesson-${VERSION}-linux.tar.gz"
              else
                cp "$file" "artifacts/FunkyLesson-${VERSION}-linux.${ext}"
              fi
            done
          fi
          
          # 显示收集到的文件
          ls -la artifacts/

      - name: Upload desktop artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-${{ matrix.artifact-name }}
          path: artifacts/*
          if-no-files-found: warn

  build-android:
    name: Android Build  
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    needs: quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cache-disabled: false

      # 🎯 Android 构建也需要 WASM target（关键修复）
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android,wasm32-unknown-unknown

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      # 🔧 修复 NDK 安装和环境变量设置
      - name: Install and setup Android NDK
        run: |
          # 安装 NDK
          yes | sdkmanager "ndk;26.3.11579264"
          
          # 设置环境变量
          echo "NDK_HOME=$ANDROID_HOME/ndk/26.3.11579264" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/26.3.11579264" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/26.3.11579264" >> $GITHUB_ENV
          
          # 验证安装
          ls -la $ANDROID_HOME/ndk/
          ls -la $ANDROID_HOME/ndk/26.3.11579264/

      - name: Cache build tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/trunk
            ~/.cargo/bin/cargo-tauri
          key: build-tools-${{ runner.os }}-trunk-${{ env.TRUNK_VERSION }}-tauri-${{ env.TAURI_CLI_VERSION }}

      - name: Install tools
        run: |
          # 🚀 Android 构建也使用预编译版本的 trunk
          if [ ! -f ~/.cargo/bin/trunk ]; then
            mkdir -p ~/.cargo/bin
            curl -L "https://github.com/trunk-rs/trunk/releases/download/v${{ env.TRUNK_VERSION }}/trunk-x86_64-unknown-linux-gnu.tar.gz" -o trunk.tar.gz
            tar -xzf trunk.tar.gz
            mv trunk ~/.cargo/bin/
            ~/.cargo/bin/trunk --version
          fi
          
          if [ ! -f ~/.cargo/bin/cargo-tauri ]; then
            cargo install --version ${{ env.TAURI_CLI_VERSION }} tauri-cli --locked
          fi

      - name: Setup Android signing
        run: |
          mkdir -p ${{ github.workspace }}/android-signing
          echo "${{ secrets.ANDROID_KEYSTORE_FILE }}" | base64 --decode > ${{ github.workspace }}/android-signing/app-release.jks
          cat << EOF > ${{ github.workspace }}/src-tauri/gen/android/local.properties
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=${{ github.workspace }}/android-signing/app-release.jks
          EOF

      # 🔧 添加环境变量验证和构建前检查
      - name: Verify Android environment
        run: |
          echo "=== Environment Variables ==="
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "NDK_HOME: $NDK_HOME"
          echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
          echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
          
          echo "=== NDK Directory ==="
          ls -la $ANDROID_HOME/ndk/26.3.11579264/ || echo "NDK directory not found"
          
          echo "=== Rust targets ==="
          rustup target list --installed

      - name: Build Android APK (Release & Signed)
        run: cargo tauri android build
        env:
          CARGO_INCREMENTAL: 1
          NDK_HOME: ${{ env.NDK_HOME }}
          ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}

      # 收集和重命名 Android 产物
      - name: Collect and rename Android artifacts
        run: |
          # 提取版本号（去掉 'v' 前缀）
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          
          mkdir -p artifacts
          
          # 重命名 APK
          find src-tauri/gen/android/app/build/outputs/apk/universal/release -name "*.apk" | while read apk; do
            cp "$apk" "artifacts/FunkyLesson-${VERSION}.apk"
          done
          
          # 重命名 AAB
          find src-tauri/gen/android/app/build/outputs/bundle/universalRelease -name "*.aab" | while read aab; do
            cp "$aab" "artifacts/FunkyLesson-${VERSION}.aab"
          done
          
          # 显示收集到的文件
          ls -la artifacts/

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android
          path: artifacts/*
          if-no-files-found: error

      - name: Cleanup signing files
        if: always()
        run: |
          rm -rf ${{ github.workspace }}/android-signing
          rm -f ${{ github.workspace }}/src-tauri/gen/android/local.properties

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v') 
    needs: [build-desktop, build-android]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Display structure of downloaded files
        run: find release-artifacts -type f -name "*"

      - name: Prepare release files
        run: |
          mkdir -p release-files
          # 复制所有产物到统一目录
          find release-artifacts -type f \( -name "*.apk" -o -name "*.aab" -o -name "*.msi" -o -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.AppImage" -o -name "*.tar.gz" -o -name "*.app.tar.gz" \) -exec cp {} release-files/ \;
          
          # 显示准备发布的文件
          echo "=== Files to be released ==="
          ls -la release-files/
      - name: Generate checksums and release notes
        id: release-notes
        run: |
          VERSION="${{ github.ref_name }}"
          
          # 生成 SHA256 校验和文件
          cd release-files
          if [ -n "$(ls -A . 2>/dev/null)" ]; then
            sha256sum * > SHA256SUMS.txt
          else
            echo "No files found to generate checksums" > SHA256SUMS.txt
          fi
          cd ..
          
          cat > release-notes.md << 'EOF'
          # FunkyLesson ${VERSION}
          
          ## 📦 Release Assets
          
          ### Desktop Applications
          
          | File | SHA256 |
          |------|--------|
          EOF
          
          # 替换版本号
          sed -i "s/\${VERSION}/$VERSION/g" release-notes.md
          
          # 桌面端文件处理 - 使用更安全的方法
          desktop_files_found=false
          for pattern in "*.msi" "*.exe" "*.dmg" "*.deb" "*.AppImage" "*.tar.gz"; do
            for file in release-files/$pattern; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                # 检查是否是 app.tar.gz（macOS app bundle）
                if [[ "$filename" == *".app.tar.gz" ]] || [[ "$filename" != *".app.tar.gz" && "$filename" == *".tar.gz" ]]; then
                  checksum=$(cd release-files && sha256sum "$filename" | cut -d' ' -f1)
                  echo "| **${filename}** | \`${checksum}\` |" >> release-notes.md
                  desktop_files_found=true
                fi
              fi
            done
          done
          
          # 特殊处理 .app.tar.gz 文件
          for file in release-files/*.app.tar.gz; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              checksum=$(cd release-files && sha256sum "$filename" | cut -d' ' -f1)
              echo "| **${filename}** | \`${checksum}\` |" >> release-notes.md
              desktop_files_found=true
            fi
          done
          
          if [ "$desktop_files_found" = false ]; then
            echo "| No desktop files found | - |" >> release-notes.md
          fi
          
          cat >> release-notes.md << 'EOF'
          
          ### Android Applications
          
          | File | SHA256 |
          |------|--------|
          EOF
          
          # Android 文件处理
          android_files_found=false
          for pattern in "*.apk" "*.aab"; do
            for file in release-files/$pattern; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                checksum=$(cd release-files && sha256sum "$filename" | cut -d' ' -f1)
                echo "| **${filename}** | \`${checksum}\` |" >> release-notes.md
                android_files_found=true
              fi
            done
          done
          
          if [ "$android_files_found" = false ]; then
            echo "| No Android files found | - |" >> release-notes.md
          fi
          
          cat >> release-notes.md << 'EOF'
          
          ## 🔐 File Integrity Verification
          
          You can verify the integrity of downloaded files using SHA256 checksums:
          
          ```bash
          # On Linux/macOS
          sha256sum -c SHA256SUMS.txt
          
          # On Windows (PowerShell)
          Get-FileHash -Algorithm SHA256 <filename>
          ```
          
          All checksums are also available in the `SHA256SUMS.txt` file.
          EOF
          
          # 调试信息
          echo "=== Generated release notes ==="
          cat release-notes.md
          echo "=== Available files ==="
          ls -la release-files/ || echo "No files directory found"
          
          # 设置输出（使用文件方式避免特殊字符问题）
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/*
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.release-notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}